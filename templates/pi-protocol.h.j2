{#
/*
 * Copyright 2023, 2024 Till Blaha (Delft University of Technology)
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with this program.
 *
 * If not, see <https://www.gnu.org/licenses/>.
 */
#}
{{ license }}

/* THIS FILE HAS BEEN AUTOGENERATED BY generate.py, DO NOT MODIFY */

#ifndef PI_PROTOCOL_H
#define PI_PROTOCOL_H

#ifdef __cplusplus
extern "C" {
#endif

#include <string.h>
#include <stdint.h>
#include <stdbool.h>

// --- Protocol definition ---
#define PI_VERSION_MAJOR {{ config.version.major }}
#define PI_VERSION_MINOR {{ config.version.minor }}
#define PI_VERSION_PATCH {{ config.version.patch }}

// message format: | STX | MSG_ID | PAYLOAD_1 | PAYLOAD_2 | ... | PAYLOAD_N |
// if STX occurs in PAYLOAD or MSG_ID, it is escaped by the sequency PI_ESC PI_STX_ESC
// if ESC occurs in PAYLOAD or MSG_ID, it is escaped by the sequence PI_ESC PI_ESC_ESC
#define PI_STX 0xFE
#define PI_ESC 0x01
#define PI_STX_ESC 0x02
#define PI_ESC_ESC 0x03
#define PI_MSG_MAX_PAYLOAD_LEN 0xFF
#define PI_MSG_ID_BYTES 1
#define PI_MSG_PAYLOAD_LEN_BYTES 1
#define PI_MAX_PACKET_LEN (PI_MSG_MAX_PAYLOAD_LEN + PI_MSG_ID_BYTES)

// --- crc ---
// this crc8 is guaranteed to catch all double-bit flips up to payload length of 247bits
// https://users.ece.cmu.edu/~koopman/crc/c08/0xe7_len.txt
#define PI_CRC8_POLYNOMIAL 0xE7

// well known slow (without lookup tables) crc8 code taken from betaflight
uint8_t crc8_calc_pi(uint8_t crc, unsigned char a, uint8_t poly);

// --- global mode ---
#define PI_NONE 0
#define PI_TX   1 << 0
#define PI_RX   1 << 1
#define PI_RXTX (PI_TX | PI_RX)

// --- Global mode config ---
#define PI_MODE PI_{{ config.global_mode }}

// --- Message flags ---
#define PI_MSG_NONE_ID 0xFF
#define PI_MSG_MAX_ID 0xFE
#define PI_MSG_NUM {{ config.include_messages|length }} // unused, maybe in future

// --- serializer ---
#if (PI_MODE & PI_TX)
void piSendMsg(void * msg_raw, void (*serialWriter)(uint8_t byte));
unsigned int piAccumulateMsg(void * msg_raw, uint8_t * buf);
#endif

// rx parsing states
#if (PI_MODE & PI_RX)
typedef enum {
    PI_MSG_RX_STATE_A,
    PI_MSG_RX_STATE_B,
    PI_MSG_RX_STATE_NONE
} pi_msg_rx_state_t;

typedef enum {
    PI_IDLE,
    PI_STX_FOUND,
    PI_ID_FOUND
} pi_parse_state_t;

typedef enum {
    PI_PARSE_MSG_NO_ERROR = -1,
    PI_PARSE_MSG_SUCCESS,
    PI_PARSE_MSG_INVALID_ID,
    PI_PARSE_MSG_EXCEEDS_MAX_PAYLOAD_LEN,
    PI_PARSE_MSG_EXCEEDS_MSG_PAYLOAD_LEN,
    PI_PARSE_MSG_INVALID_CHECKSUM,
    PI_PARSE_MSG_NULL_BUFFER,
    PI_PARSE_MSG_NO_SUCH_MSG,
} pi_parse_msg_result_t;

typedef struct pi_parse_states_s {
    uint8_t msgId;
    uint8_t curMsgId;
    uint8_t piMsgLen;
    uint8_t byteCount;
    bool piEscHit;
    pi_parse_state_t piState;
    pi_parse_msg_result_t msgParseResult;
    void * piMsgRxBuffer;
    void ** piMsgRx_ptr;
    void * piMsgA_ptr;
    void * piMsgB_ptr;
    pi_msg_rx_state_t * piMsgRxState_ptr;
    uint8_t checksum;
} pi_parse_states_t;

uint8_t piParse(pi_parse_states_t * p, uint8_t byte);

#ifdef PI_STATS
typedef enum {
    PI_SUCCESS = PI_PARSE_MSG_SUCCESS,
    PI_INVALID_ID = PI_PARSE_MSG_INVALID_ID,
    PI_EXCEEDS_MAX_PAYLOAD_LEN = PI_PARSE_MSG_EXCEEDS_MAX_PAYLOAD_LEN,
    PI_EXCEEDS_MSG_PAYLOAD_LEN = PI_PARSE_MSG_EXCEEDS_MSG_PAYLOAD_LEN,
    PI_INVALID_CHECKSUM = PI_PARSE_MSG_INVALID_CHECKSUM,
    PI_NULL_BUFFER = PI_PARSE_MSG_NULL_BUFFER,
    PI_NO_SUCH_MSG = PI_PARSE_MSG_NO_SUCH_MSG,
    PI_ESC_ERROR,
    PI_STX_COUNT,
    PI_PARSE_INVOKE,
    NUM_PI_STATS_RESULT,
} pi_stats_result_t;

extern unsigned int piStats[NUM_PI_STATS_RESULT];

__attribute__((unused)) static const char* piStatsNames[NUM_PI_STATS_RESULT] = {
    "PI_SUCCESS",
    "PI_INVALID_ID",
    "PI_EXCEEDS_MAX_PAYLOAD_LEN",
    "PI_EXCEEDS_MSG_PAYLOAD_LEN",
    "PI_INVALID_CHECKSUM",
    "PI_NULL_BUFFER",
    "PI_NO_SUCH_MSG",
    "PI_ESC_ERROR",
    "PI_STX_COUNT",
    "PI_PARSE_INVOKE",
};

__attribute__((unused)) void piPrintStats(int (*printer)(const char * s, ...));
#endif // #ifdef PI_STATS

#ifdef PI_USE_PRINT_MSGS
void piPrintMsgs(int (*printer)(const char* s, ...));
#endif // #ifdef PI_USE_PRINT_MSGS

#endif // #ifdef (PI_MODE & PI_RX)

#ifdef __cplusplus
}
#endif

#endif // PI_PROTOCOL_H
